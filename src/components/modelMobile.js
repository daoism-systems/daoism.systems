/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState, useMemo } from 'react';
import * as THREE from 'three';
import {
  useGLTF,
  PerspectiveCamera,
  useAnimations,
  PointMaterial,
  useTexture
} from '@react-three/drei';
import { useFrame, useLoader } from '@react-three/fiber';
//import { LayerMaterial, Base, Depth, Fresnel, Noise } from 'lamina/vanilla'
import { LayerMaterial, Depth, Fresnel, Noise, Displace, Gradient } from 'lamina'
import { TextureLoader } from 'three/src/loaders/TextureLoader'
import CloudMesh from "./octagon"
import TrigramMesh from './trigramMat';
import ParticlesBackground from './ParticlesBg';
import LineSpiral from "./lineSpiral";
import LineParticles from './lineParticles';

export default function Model({ scroll, ...props }) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/DAO_M1.gltf');
  const { actions } = useAnimations(animations, group);

  const ref = useRef();

  console.log(actions);

  useEffect(() => {
    actions['SCALE 1'].clampWhenFinished = true;
    actions['SCALE 1'].repetitions = 1;
    actions['SCALE 1'].play();

    actions['rotation-1'].play();

    actions['METABOLIC ROTATION'].play();

    actions['SOLID 4 ROTATION'].play();
    actions['DOTS 4 ROTATION'].play();
    actions['SOLID 4 SCALE'].play();


    actions['BLOCKS 1 ROTATION'].play();
    actions['BLOCKS 2 ROTATION'].play();

    actions['OCTAGON IN'].clampWhenFinished = true;
    actions['OCTAGON IN'].repetitions = 1;
    actions['OCTAGON IN'].play();

    actions['CAMERA FLOW'].play().paused = true
  }, [actions]);

  useFrame(() => {
    actions['CAMERA FLOW'].time = THREE.MathUtils.lerp(
      actions['CAMERA FLOW'].time,
      actions['CAMERA FLOW'].getClip().duration * scroll.current,
      0.8
    );

    const scrollCurrent = scroll.current;
    const scrollSub = scrollCurrent.toFixed(1);

    if (scrollSub > '0.097') {
      actions['TRIGRAM SCALE'].clampWhenFinished = true;
      actions['TRIGRAM SCALE'].repetitions = 1;
      actions['TRIGRAM SCALE'].play();
      actions['TRIGRAM ROTATION'].play();
    }

  });

  const gradient = 0.6;
  const colorMap = useLoader(TextureLoader, 'texturedot.png');

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="camera" position={[30, 0, 0]} rotation={[Math.PI / 2, 0, -0.45]}>
          <PerspectiveCamera name="camera_Orientation" makeDefault={true} far={100} near={0.1} fov={54.52} rotation={[-Math.PI / 2, 0, 0]} />
        </group>
        {/* <group name="layers">
          <ParticlesBackground />
        </group> */}

        <group name="OCTAGON_CONTROLLER" position={[0, 10, -58]}>
          <points name="1" geometry={nodes['1'].geometry} position={[0, 0, 0]}>
            <PointMaterial transparent color={'#fff'} size={0.6} sizeAttenuation={true} depthWrite={false} map={colorMap} />
          </points>
          <CloudMesh nodesName={nodes.OCTAGON} positionElem={[0, 0, -23.47]} positionElem2={[0, 0, -57.35]} />
        </group>

        <TrigramMesh nodesName={nodes.TRIGRAM} positionElem={[0, 0, -220]} rotationElem={[0, 0, 0]} scaleElem={1} />

        <group name="METABOLIC" position={[0, -18, -440]} scale={0.94}>
          <mesh name="metabolic_blocks_1" layers={1} geometry={nodes.metabolic_blocks_1.geometry} material={nodes.metabolic_blocks_1.material}>
            <LayerMaterial ref={ref} toneMapped={false}>
              <Depth
                colorA="#ff0080"
                colorB="black"
                alpha={1}
                mode="normal"
                near={0.5 * gradient}
                far={0.5}
                origin={[0, 0, 0]}
              />
              <Fresnel
                mode="add"
                color="white"
                intensity={0.5}
                power={1.5}
                bias={0.05}
              />
            </LayerMaterial>
          </mesh>
          <points name="metabolic_points_1" layers={1} geometry={nodes.metabolic_points_1.geometry} position={[0, 27.31, 0]}>
            <PointMaterial
              transparent
              color={'#fff'}
              size={0.2}
              sizeAttenuation={true}
              depthWrite={false}
            />
          </points>
          <points name="metabolic_points_2" layers={1} geometry={nodes.metabolic_points_2.geometry}>
            <PointMaterial
              transparent
              color={'#fff'}
              size={0.2}
              sizeAttenuation={true}
              depthWrite={false}
            />
          </points>
          <mesh name="metabolic_blocks_2" layers={1} geometry={nodes.metabolic_blocks_2.geometry}>
            <LayerMaterial ref={ref} toneMapped={false}>
              <Depth
                colorA="#ff0080"
                colorB="black"
                alpha={1}
                mode="normal"
                near={0.5 * gradient}
                far={0.5}
                origin={[0, 0, 0]}
              />
              <Fresnel
                mode="add"
                color="white"
                intensity={0.5}
                power={1.5}
                bias={0.05}
              />

            </LayerMaterial>
          </mesh>
        </group>


        {/* 
   <CloudMesh nodesName={nodes.TRIGRAM} positionElem={[-9, 0, -160]} positionElem2={[-9, 0, -160]} rotationElem={[0, 0, 0]} scaleElem={1} />
         */}

        {/* <group name="SPIRALS" position={[0, -2, 0]}>
          <LineSpiral nodesName={nodes.Spiral_1.geometry} rotationElem={[Math.PI / 2, Math.PI / 8, -Math.PI / 2]} scaleElem={1} positionElem={[-5.3, -2.2, -79.01]} speed={4.2}/>
          <LineSpiral nodesName={nodes.Spiral_2.geometry} rotationElem={[Math.PI / 2, 1.18, -Math.PI / 2]} scaleElem={1} positionElem={[-2.2, -5.3, -79.01]} speed={4.2}/>
          <LineSpiral nodesName={nodes.Spiral_3.geometry} rotationElem={[-Math.PI / 2, 1.18, Math.PI / 2]} scaleElem={1} positionElem={[2.2, -5.3, -79.01]} speed={4.2}/>
          <LineSpiral nodesName={nodes.Spiral_4.geometry} rotationElem={[-Math.PI / 2, Math.PI / 8, Math.PI / 2]} scaleElem={1} positionElem={[5.3, -2.2, -79.01]} speed={4.2}/>

        </group> */}

        {/* <group name="LINES">
          <LineSpiral nodesName={nodes['line-1'].geometry} rotationElem={[0, 0, 2.39]} scaleElem={[2, 10, 2.46]} positionElem={[-23.66, -13.12, -317.98]} speed={5.5} delay1={0} />
          <LineSpiral nodesName={nodes['line-3'].geometry} rotationElem={[0, 0, -1.78]} scaleElem={[2, 10, 2.17]} positionElem={[20.96, -12, -43.46]} speed={8} delay1={-0.4} />
          <LineSpiral nodesName={nodes['line-6'].geometry} rotationElem={[0, 0, -0.66]} scaleElem={[2, 10, 2.27]} positionElem={[16.91, 11.99, -51.43]} speed={9} delay1={-0.2} />
          <LineSpiral nodesName={nodes['line-7'].geometry} rotationElem={[0, 0, 2.39]} scaleElem={[2, 10, 2.46]} positionElem={[-19.35, -13.12, -32.75]} speed={8.5} delay1={-0.55} />
          <LineSpiral nodesName={nodes['line-8'].geometry} rotationElem={[0, 0, -2.45]} scaleElem={[2, 10, 2.69]} positionElem={[-25.54, -1.6, -52.34]} speed={5} delay1={-0.4} />

          <LineSpiral nodesName={nodes['line-9'].geometry} rotationElem={[0, 0, 1.6]} scaleElem={[2, 10, 2.81]} positionElem={[33.48, 0.59, -114.97]} speed={7} delay1={0} />
          <LineSpiral nodesName={nodes['line-5'].geometry} rotationElem={[0, 0, 1.1]} scaleElem={[2, 10, 2.8]} positionElem={[-22.65, 10.46, -255.49]} speed={7} delay1={0} />
          <LineSpiral nodesName={nodes['line-4'].geometry} rotationElem={[0, 0, -0.65]} scaleElem={[2, 10, 2.55]} positionElem={[26.04, 14.07, -271.03]} speed={5.5} delay1={0} />
          <LineSpiral nodesName={nodes['line-2'].geometry} rotationElem={[0, 0, -2.42]} scaleElem={[2, 10, 1.95]} positionElem={[-18.26, 12.83, -36.46]} speed={10} delay1={0} />
          <LineSpiral nodesName={nodes['line-10'].geometry} rotationElem={[0, 0, -1.78]} scaleElem={[2, 10, 2.17]} positionElem={[26.31, -13.62, -287.66]} speed={11} delay1={0} />
        </group> */}



        <group name="OBJECT_4" position={[0, 1, -670]}>
          <mesh name="sphere_solid" layers={1} geometry={nodes.sphere_solid.geometry} material={nodes.sphere_solid.material}>
            <LayerMaterial ref={ref}>
              <Depth
                colorA="#ff0080"
                colorB="black"
                alpha={1}
                mode="normal"
                near={0.5 * gradient}
                far={0.5}
                origin={[0, 0, 0]}
              />
              <Fresnel
                mode="add"
                color="white"
                intensity={0.5}
                power={1.5}
                bias={0.05}
              />
            </LayerMaterial>
          </mesh>
          <mesh name="blocks_1" layers={1} geometry={nodes.blocks_1.geometry} material={nodes.blocks_1.material} position={[0, -10.57, 0]} rotation={[-Math.PI, 0, -Math.PI]} scale={[-1.24, -1.12, -1.12]}>
            <LayerMaterial ref={ref} toneMapped={false}>
              <Depth
                colorA="#ff0080"
                colorB="black"
                alpha={1}
                mode="normal"
                near={0.5 * gradient}
                far={0.5}
                origin={[0, 0, 0]}
              />
              <Fresnel
                mode="add"
                color="white"
                intensity={0.5}
                power={1.5}
                bias={0.05}
              />
            </LayerMaterial>
          </mesh>
          <mesh name="blocks_2" layers={1} geometry={nodes.blocks_2.geometry} material={nodes.blocks_2.material} position={[0, 10.57, 0]} scale={[1.24, 1.12, 1.12]}>
            <LayerMaterial ref={ref} toneMapped={false} depthWrite={false}>
              <Depth
                colorA="#ff0080"
                colorB="black"
                alpha={1}
                mode="normal"
                near={0.5 * gradient}
                far={0.5}
                origin={[0, 0, 0]}
              />
              <Fresnel
                mode="add"
                color="white"
                intensity={0.5}
                power={1.5}
                bias={0.05}
              />
            </LayerMaterial>
          </mesh>
          <points name="sphere_dots" layers={1} position={[0, 0, 0]} geometry={nodes.sphere_dots.geometry} material={nodes.sphere_dots.material} scale={[0.92, 1, 0.97]}>
            <PointMaterial transparent size={0.3} depthWrite={false} />
          </points>
        </group>


        {/* <group name="SPIRAL_CONTROLLER" position={[800.01, -3.99, -276.97]}>
          <mesh name="SPIRAL_1" layers={0} geometry={nodes.SPIRAL_1.geometry}>
            <meshBasicMaterial transparent={true} depthWrite={false} opacity={1} map={spiralTexture} />
          </mesh>
          <mesh name="SPIRAL_2" layers={0} geometry={nodes.SPIRAL_2.geometry}>
            <meshBasicMaterial transparent={true} depthWrite={false} opacity={1} map={spiralTexture} />
          </mesh>
        </group> */}

        {/**
 * 
 */}
        {/* <mesh name="SPIRAL_1" geometry={nodes.SPIRAL_1.geometry} position={[920, -4, -275]}>
          <meshBasicMaterial transparent={true} opacity={1} map={spiralTexture} />
        </mesh>
        <mesh name="SPIRAL_2" geometry={nodes.SPIRAL_2.geometry} material={nodes.SPIRAL_2.material} position={[920, -4, -275]}>
          <meshBasicMaterial transparent={true} opacity={1} map={spiralTexture} />
        </mesh> */}

        {/* <mesh name="OBJECT_4" geometry={nodes.OBJECT_4.geometry} morphTargetDictionary={nodes.OBJECT_4.morphTargetDictionary} morphTargetInfluences={nodes.OBJECT_4.morphTargetInfluences} position={[-8, 0, -360]}>
          <LayerMaterial ref={ref} toneMapped={false}>
            <Depth
              colorA="#ff0080"
              colorB="black"
              alpha={1}
              mode="normal"
              near={0.5 * gradient}
              far={0.5}
              origin={[0, 0, 0]}
            />
            <Fresnel
              mode="add"
              color="white"
              intensity={0.5}
              power={1.5}
              bias={0.05}
            />
          </LayerMaterial>
        </mesh> */}


      </group>
    </group >
  );
}


// useGLTF.preload('/DAO_M1.gltf')